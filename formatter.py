"""
                    –ú–æ–¥—É–ª—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
"""

from typing import List, Dict, Any
from datetime import datetime


class ResultFormatter:
    def __init__(self):
        self.width = 80  # –®–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü

    def print_movies(self, movies: List[Dict]) -> None:
        if not movies:
            print(" –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print("+" + "-" * (self.width - 2) + "+")

        for i, movie in enumerate(movies, 1):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∏–ª—å–º–∞
            title = f"{i}. {movie['title']} ({movie['release_year'] or '–ù/–î'})"
            rating = movie.get('rating', '–ù/–î')
            length = movie.get('length', '–ù/–î')

            print(f"| {title:<{self.width - 4}} |")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ
            info = f"    –†–µ–π—Ç–∏–Ω–≥: {rating} |  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length} –º–∏–Ω"
            print(f"| {info:<{self.width - 4}} |")

            # –û–ø–∏—Å–∞–Ω–∏–µ (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
            description = movie.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            if len(description) > self.width - 8:
                description = description[:self.width - 11] + "..."

            desc_line = f"    {description}"
            print(f"| {desc_line:<{self.width - 4}} |")

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ñ–∏–ª—å–º–∞–º–∏
            if i < len(movies):
                print("|" + "-" * (self.width - 2) + "|")

        print("+" + "-" * (self.width - 2) + "+")

    def print_movies_with_genre(self, movies: List[Dict]) -> None:
        if not movies:
            print("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print("+" + "-" * (self.width - 2) + "+")

        for i, movie in enumerate(movies, 1):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∏–ª—å–º–∞
            title = f"{i}. {movie['title']} ({movie['release_year'] or '–ù/–î'})"
            print(f"| {title:<{self.width - 4}} |")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ —Å –∂–∞–Ω—Ä–æ–º
            rating = movie.get('rating', '–ù/–î')
            length = movie.get('length', '–ù/–î')
            genre = movie.get('genre', '–ù/–î')

            info = f"    {genre} |  {rating} |  {length} –º–∏–Ω"
            print(f"| {info:<{self.width - 4}} |")

            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = movie.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            if len(description) > self.width - 8:
                description = description[:self.width - 11] + "..."

            desc_line = f"    {description}"
            print(f"| {desc_line:<{self.width - 4}} |")

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ñ–∏–ª—å–º–∞–º–∏
            if i < len(movies):
                print("|" + "-" * (self.width - 2) + "|")

        print("+" + "-" * (self.width - 2) + "+")

    def print_genres(self, genres: List[Dict]) -> None:
        if not genres:
            print(" –ñ–∞–Ω—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –í—ã–≤–æ–¥–∏–º –∂–∞–Ω—Ä—ã –ø–æ 3 –≤ —Ä—è–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        cols = 3
        for i in range(0, len(genres), cols):
            row_genres = genres[i:i + cols]
            genre_line = ""

            for j, genre in enumerate(row_genres):
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–≤–æ–∑–Ω–æ–π –Ω–æ–º–µ—Ä –∂–∞–Ω—Ä–∞
                genre_number = i + j + 1
                genre_name = genre['name']

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: –ù–æ–º–µ—Ä. –ò–º—è_–ñ–∞–Ω—Ä–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å—Ç—É–ø 30 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                genre_entry = f"{genre_number}. {genre_name}"
                genre_line += f" {genre_entry:<30}"

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä—è–¥—É
                if j < len(row_genres) - 1:
                    genre_line += " | "

            print(genre_line)

    def print_popular_searches(self, searches: List[Dict]) -> None:
        if not searches:
            print("–î–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –ø–æ–∫–∞ –Ω–µ—Ç")
            return

        print(" –¢–û–ü –ü–û–ü–£–õ–Ø–†–ù–´–• –ó–ê–ü–†–û–°–û–í")
        print("=" * 50)

        for i, search in enumerate(searches, 1):
            search_text = search['search_text']
            count = search['count']
            search_type = search['search_type']
            total_results = search.get('total_results', 0)

            print(f"{i}.'{search_text}'")
            print(f"–ü–æ–∏—Å–∫–æ–≤: {count} |  –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_results}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'last_search' in search and search['last_search']:
                last_date = search['last_search']
                if isinstance(last_date, datetime):
                    formatted_date = last_date.strftime("%d.%m.%Y %H:%M")
                    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫: {formatted_date}")

            if i < len(searches):
                print("-" * 30)

        print("=" * 50)

    def print_recent_searches(self, searches: List[Dict]) -> None:
        if not searches:
            print("–î–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –ø–æ–∫–∞ –Ω–µ—Ç")
            return

        print("–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–†–û–°–´")
        print("=" * 50)

        for i, search in enumerate(searches, 1):
            search_text = search['search_text']
            search_type = search['search_type']
            results_count = search.get('results_count', 0)
            timestamp = search.get('timestamp')


            print(f"{i}.'{search_text}'")
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_count}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
            if timestamp and isinstance(timestamp, datetime):
                formatted_time = timestamp.strftime("%d.%m.%Y %H:%M:%S")
                print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {formatted_time}")

            if i < len(searches):
                print("-" * 30)

        print("=" * 50)

    def print_search_stats(self, stats: Dict[str, Any]) -> None:
        print("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 40)

        for key, value in stats.items():
            # –ö—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–ª—é—á–µ–π
            readable_keys = {
                'total_searches': '–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤',
                'keyword_searches': '–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º',
                'genre_year_searches': '–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º',
                'empty_searches': '–ü—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
            }

            readable_key = readable_keys.get(key, key)
            print(f"{readable_key}: {value}")

        print("=" * 40)

    def print_error_message(self, message: str) -> None:
        print("\n" + "X " + "=" * 50 + " X")
        print(f" –û–®–ò–ë–ö–ê: {message}")
        print("X" + "=" * 50 + " üö®\n")

    def print_success_message(self, message: str) -> None:
        print("\n" + "ok" + "=" * 50 + "ok")
        print(f" {message}")
        print("ok" + "=" * 50 + " ok\n")

    def print_info_message(self, message: str) -> None:
        print(f"\n {message}\n")

    def truncate_text(self, text: str, max_length: int = 50) -> str:
        if len(text) <= max_length:
            return text
        return text[:max_length - 3] + "..."


def test_formatter():
    formatter = ResultFormatter()
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n")

    test_movies = [
        {
            'title': 'The Matrix',
            'release_year': 1999,
            'rating': 'R',
            'length': 136,
            'description': 'A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.'
        },
        {
            'title': 'Avatar',
            'release_year': 2009,
            'rating': 'PG-13',
            'length': 162,
            'description': 'A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.'
        }
    ]

    print("–¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ —Ñ–∏–ª—å–º–æ–≤:")
    formatter.print_movies(test_movies)

    test_genres = [
        {'name': 'Action'}, {'name': 'Comedy'}, {'name': 'Drama'},
        {'name': 'Horror'}, {'name': 'Sci-Fi'}, {'name': 'Romance'}
    ]

    print("\n –¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ –∂–∞–Ω—Ä–æ–≤:")
    formatter.print_genres(test_genres)

    test_popular = [
        {
            'search_text': 'matrix',
            'count': 15,
            'search_type': 'keyword',
            'total_results': 3,
            'last_search': datetime.now()
        },
        {
            'search_text': 'action 2000-2010',
            'count': 8,
            'search_type': 'genre_year',
            'total_results': 25
        }
    ]

    print("\n –¢–µ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    formatter.print_popular_searches(test_popular)

    print("\n –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_formatter()