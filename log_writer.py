"""
                –ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ MongoDB
"""


from pymongo import MongoClient
from datetime import datetime
from typing import Dict, Any
import os


class LogWriter:

    def __init__(self):
        self.client = None
        self.db = None
        self.collection = None
        self.connect()

    def connect(self):
        try:
            # –ß—Ç–µ–Ω–∏–µ –∏–∑ .env
            mongodb_uri = os.getenv('MONGO_URI')
            database_name = os.getenv('MONGO_DATABASE')
            collection_name = os.getenv('MONGO_COLLECTION')

            self.client = MongoClient(mongodb_uri)
            self.db = self.client[database_name]
            self.collection = self.db[collection_name]

            self.client.server_info()
            #print(" –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}") # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MongoDB –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            raise

    def log_search(self, search_type: str, params: Dict[str, Any], results_count: int):
        try:
            # --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ---
            current_time = datetime.now()
        log_entry = {
            "timestamp": current_time,
            "search_type": search_type,
            "params": params,
            "results_count": results_count,

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
            "date": current_time.strftime("%Y-%m-%d"),
            "hour": current_time.hour
        }

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ "search_text" –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            # –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ LogStats.
            if search_type == "keyword":
                log_entry["search_text"] = params.get("keyword", "").lower()
            elif search_type == "genre_year":
                log_entry[
                    "search_text"] = f"{params.get('genre', '')} {params.get('year_from', '')}-{params.get('year_to', '')}".lower()

            result = self.collection.insert_one(log_entry)

            if result.inserted_id:
                #print(f" –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥ (ID: {result.inserted_id})")
                pass
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥") # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        except Exception:
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –≤ –æ—Ç–ª–∞–¥–∫–µ, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ main.py
        print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ ")

    def log_keyword_search(self, keyword: str, results_count: int):
        params = {"keyword": keyword}
        self.log_search("keyword", params, results_count)

    def log_genre_year_search(self, genre: str, year_from: int, year_to: int, results_count: int):
        params = {
            "genre": genre,
            "year_from": year_from,
            "year_to": year_to
        }
        self.log_search("genre_year", params, results_count)

    def get_logs_count(self) -> int:
        try:
            return self.collection.count_documents({})
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ª–æ–≥–æ–≤: {e}")
            return 0

    def clear_logs(self) -> bool:
        try:
            result = self.collection.delete_many({})
            print(f"üóë –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.deleted_count}")
            return True
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
            return False

    def get_logs_by_date(self, date: str) -> list:
        try:
            logs = self.collection.find({"date": date}).sort("timestamp", -1)
            return list(logs)
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ –¥–∞—Ç–µ: {e}")
            return []

    def get_logs_by_type(self, search_type: str) -> list:
        try:
            logs = self.collection.find({"search_type": search_type}).sort("timestamp", -1)
            return list(logs)
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É: {e}")
            return []

    def test_connection(self) -> bool:
        try:
            self.client.server_info()  # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            if self.collection.name:
                return True
            else:
                print(" –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
                return False
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_collection_stats(self) -> Dict[str, Any]:
        try:
            stats = {}

            stats['total_logs'] = self.collection.count_documents({})

            keyword_count = self.collection.count_documents({"search_type": "keyword"})
            genre_count = self.collection.count_documents({"search_type": "genre_year"})

            stats['keyword_searches'] = keyword_count
            stats['genre_searches'] = genre_count

            empty_results = self.collection.count_documents({"results_count": 0})
            stats['empty_results'] = empty_results

            return stats

        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
            return {}

    def close(self):
        try:
            if self.client:
                self.client.close()
                print(" –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


def test_log_writer():
    try:
        logger = LogWriter()

        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∏ main.py —É–≤–∏–¥–∏—Ç –æ—à–∏–±–∫—É.
        if not logger.test_connection():
            print(" –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ MongoDB!")
            return

        print(" –¢–µ—Å—Ç: –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ (LogWriter) - –ù–∞—á–∏–Ω–∞–µ–º...")

        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
        initial_count = logger.get_logs_count()

        # 1. –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        logger.log_keyword_search("alien", 5)

        # 2. –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É/–≥–æ–¥–∞–º
        logger.log_genre_year_search("Action", 2005, 2015, 10)

        final_count = logger.get_logs_count()

        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ª–æ–≥-–∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        if final_count > initial_count:
            print(f" –£—Å–ø–µ—Ö: –î–æ–±–∞–≤–ª–µ–Ω–æ {final_count - initial_count} –ª–æ–≥(–æ–≤). –ó–∞–ø–∏—Å—å —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        else:
            print(" –û—à–∏–±–∫–∞: –õ–æ–≥–∏ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é.")

        logger.close()

    except Exception as e:
        print(f" –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ LogWriter: {e}")


if __name__ == "__main__":
    test_log_writer()